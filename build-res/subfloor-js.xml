<!--===========================================================================
Copyright (c) 2012, Pentaho Engineering Team
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Pentaho Corporation nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Pentaho Engineering Team ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <copyright holder> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
============================================================================-->
<!--===========================================================================
    == SUBFLOOR-JS ==

    $Rev: 1 $
    $Date: 2012-02-22 9:58:26 -0500 (Wed, 09 Dec 2009) $
    Project Home: http://code.google.com/p/subfloor/

    Provides default targets for creating application archives such as zip and tar.gzip
    files.
    ============================================================================-->

<project name="subfloor-js" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:artifact="antlib:org.apache.maven.artifact.ant">


  <!-- Import the next subfloor instance, defaults to -pkg, but configurable -->
  <echo message="JS importing pkg file: ${subfloor-js-pkg.file}"/>
  <import file="subfloor-pkg.xml"/>


  <property name="js.lib.dir" value="js-lib"/>

  <!-- location of module scripts -->
  <property name="js.module.script.dir" value="package-res/module-scripts"/>

  <property name="js.module.script.namespace" value=""/>

  <!-- directory to unzip all dependent JS zips -->
  <property name="js.module.script.agg.dir" value="build-res/module-scripts"/>

  <property name="js.build.output.dir" value="bin/scriptOutput"/>


  <property name="js.build.file" value="build-res/javascript.build.js"/>
  <property name="js.script.package.dest" value="${stage.dir}/${package.root.dir}/scripts"/>

  <property name="css.build.file" value="build-res/css.build.js"/>

  <property name="js.build.optimizer"
            value="uglify"
            description="Flag to pass into RequireJS's build profile. Possible values: none, uglify" />

  <!-- location to expand the zipped contents of js dependencies (to be available for testing) -->
  <property name="js.expanded.lib.dir" value="${js.lib.dir}/expanded"/>

  <!-- Path to the karma configuration -->
  <property name="js.karma.config" value="config/karma.ci.conf.js"/>

  <property environment="env"/>

  <target name="js.clean"
          description="Cleans all the files generated from a build with the exception of IVY-downloaded jars (see clean-all)">
    <delete dir="${js.module.script.agg.dir}"/>
  </target>

  <available file="" property="js-lib-dir-exists"/>

  <target name="resolve-js" depends="install-ivy, install-antcontrib">
    <ivy:resolve file="ivy.xml" conf="js"/>
    <ivy:retrieve conf="js" pattern="${js.lib.dir}/[module]-[revision](-[classifier]).[ext]"/>

    <if>
      <available file="${js.lib.dir}"/>
      <then>
        <unzip dest="${js.expanded.lib.dir}" overwrite="true">
          <fileset file="${js.lib.dir}/*.zip" />
          <patternset>
            <exclude name="**/*.jar"/>
            <exclude name="**/plugin*.xml"/>
            <exclude name="**/settings.xml"/>
            <exclude name="**/themes.xml"/>
          </patternset>
        </unzip>
      </then>
      <else>
        <echo>No js libraries need expanding. ${js.lib.dir} does not exist.</echo>
      </else>
    </if>

  </target>

  <target name="clean-js">
    <delete dir="${js.lib.dir}" />
    <delete dir="${js.expanded.lib.dir}" />
    <delete dir="${js.module.script.agg.dir}" />
  </target>

  <target name="check-pentaho-js-build-downloaded" depends="subfloor.install-ivy">
    <if>
      <not>
        <available file="build-res/pentaho-js-build"/>
      </not>
      <then>
        <ivy:resolve organisation="pentaho" module="pentaho-js-build" revision="0.1" inline="true" />
        <ivy:retrieve organisation="pentaho" module="pentaho-js-build" revision="0.1" inline="true" pattern="build-res/[artifact].[ext]"/>
        <unzip src="build-res/pentaho-js-build.zip" dest="build-res"/>
      </then>
    </if>
  </target>

  <target name="build-js" depends="install-antcontrib, check-pentaho-js-build-downloaded">
    <delete dir="${js.build.output.dir}"/>
    <delete dir="${js.module.script.agg.dir}" />
    <echo message="js.module.script.agg.dir: ${js.module.script.agg.dir}"/>
    <mkdir dir="${js.module.script.agg.dir}" />

    <unzip dest="${js.module.script.agg.dir}" overwrite="true">
      <fileset dir=".">
        <include name="${js.lib.dir}/*.zip"/>
      </fileset>
    </unzip>

    <copy todir="${js.module.script.agg.dir}/${js.module.script.namespace}" overwrite="true">
      <fileset dir="${js.module.script.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <path id="build.classpath">
      <fileset dir="build-res/pentaho-js-build/libs"> <!-- temporary until core build files in artifactory -->
        <include name="*.jar" />
      </fileset>
    </path>

    <echo message="var requireCfg={paths:{},shim:{}};" file="build-res/requireCfg-raw.js" force="true" append="false"/>
    <concat destfile="build-res/requireCfg-raw.js" append="true" force="yes">
      <fileset dir="${js.module.script.agg.dir}" casesensitive="yes">
        <include name="**/*-require-js-cfg.js"/>
      </fileset>
    </concat>

    <java classname="org.mozilla.javascript.tools.shell.Main"
          fork="true"
          classpathref="build.classpath"
          args="build-res/profileBuilder.js">
    </java>

    <echo message="require(requireCfg);" append="true" file="build-res/requireCfg.js"/>


    <copy todir="${js.module.script.agg.dir}" overwrite="true">
      <fileset dir="build-res/pentaho-js-build/module-scripts">
        <include name="**/*"/>
      </fileset>
    </copy>

    <mkdir dir="${js.build.output.dir}"/>

    <property environment="env" />
    <property name="node-is-available" value="false"/>
    <available file="node" filepath="${env.PATH}" property="node-is-available" />

    <if>
      <not>
        <isset property="karma-is-available" />
      </not>
      <then>
        <java classname="org.mozilla.javascript.tools.shell.Main"
              fork="true"
              classpathref="build.classpath"
              args="build-res/pentaho-js-build/r.js -o ${js.build.file} optimize=${js.build.optimizer}">
        </java>
      </then>
      <else>
        <exec command="node">
          <arg value="build-res/pentaho-js-build/r.js"/>
          <arg value="-o"/>
          <arg value="${js.build.file}"/>
          <arg value="optimize=${js.build.optimizer}"/>
        </exec>
      </else>
    </if>


  </target>

  <target name="dist-js" >
    <echo message="dist-js: ${js.module.script.dir}"/>
    <mkdir dir="bin/js-source/${js.module.script.namespace}"/>
    <copy todir="bin/js-source/${js.module.script.namespace}" overwrite="true">
      <fileset dir="${js.module.script.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <zip destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}-js.zip">
      <zipfileset dir="bin/js-source" includes="**/*"/>
    </zip>
  </target>

  <target name="js.publish-nojar" depends="create-pom">
    <antcall target="maven-publish">
      <param name="publish.groupId" value="${ivy.artifact.group}" />
      <param name="publish.artifactId" value="${ivy.artifact.id}" />
      <param name="publish.version" value="${project.revision}" />
      <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-${project.revision}-js.zip" />
    </antcall>
  </target>

  <target name="js.publish-local-nojar" depends="create-pom">

    <ivy:resolve organisation="org.apache.maven" module="maven-ant-tasks" revision="2.1.3" inline="true" transitive="false"/>
    <ivy:retrieve organisation="org.apache.maven" module="maven-ant-tasks" revision="2.1.3" inline="true" transitive="false" pattern="build-res/[artifact]-[type]-[revision].[ext]"/>


    <path id="maven-ant-tasks.classpath" path="build-res/maven-ant-tasks-jar-2.1.3.jar" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="antlib:org.apache.maven.artifact.ant"
             classpathref="maven-ant-tasks.classpath" />
    <artifact:pom id="mypom" file="${dist.dir}/pom.xml" />

    <artifact:deploy file="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar">
      <remoteRepository url="file:${user.home}/.m2/local"/>
      <pom refid="mypom"/>
      <attach file="${dist.dir}/${ivy.artifact.id}-${project.revision}-js.zip" type="zip" classifier="js"/>
      <attach file="${dist.dir}/${ivy.artifact.id}-${project.revision}-sources.zip" type="jar" classifier="sources"/>
      <attach file="${dist.dir}/${package.id}-${project.revision}.zip" type="zip" classifier=""/>

    </artifact:deploy>

  </target>

  <target name="maven-publish" depends="install-antcontrib">
    <sequential>
      <fail message="No file found at: ${publish.file}">
        <condition>
          <not>
            <available file="${publish.file}" />
          </not>
        </condition>
      </fail>
      <if>
        <isset property="isWindows" />
        <then>
          <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="deploy:deploy-file" />
            <arg value="-DrepositoryId=${ivy.repository.id}" />
            <arg value="-Durl=${ivy.repository.publish}" />
            <arg value="-DgroupId=${publish.groupId}" />
            <arg value="-DartifactId=${publish.artifactId}" />
            <arg value="-Dversion=${publish.version}" />
            <arg value="-DgeneratePom=true" />
            <arg value="-Dpackaging=zip" />
            <arg value="-Dclassifier=js" />
            <arg value="-Dfile=${publish.file}" />
          </exec>
        </then>
        <else>
          <exec executable="mvn" failonerror="true">
            <arg value="deploy:deploy-file" />
            <arg value="-DrepositoryId=${ivy.repository.id}" />
            <arg value="-Durl=${ivy.repository.publish}" />
            <arg value="-DgroupId=${publish.groupId}" />
            <arg value="-DartifactId=${publish.artifactId}" />
            <arg value="-Dversion=${publish.version}" />
            <arg value="-DgeneratePom=true" />
            <arg value="-Dpackaging=zip" />
            <arg value="-Dclassifier=js" />
            <arg value="-Dfile=${publish.file}" />
          </exec>
        </else>
      </if>
    </sequential>
  </target>


  <target name="package-js-output">
    <copy todir="${js.script.package.dest}" overwrite="true">
      <fileset dir="${js.module.script.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <copy todir="${js.script.package.dest}" overwrite="true">
      <fileset dir="${js.build.output.dir}">
        <include name="*"/>
      </fileset>
    </copy>

  </target>


  <!-- Check to see if karma is on the PATH -->
  <available file="karma" filepath="${env.PATH}" property="karma-is-available" />

  <!-- Only run if there is a package.json file -->
  <target name="npm-install">
    <if>
      <available file="package.json"/>
      <then>
        <exec executable="npm">
          <arg value="install"/>
        </exec>
      </then>
      <else>
        <echo>Skipping 'npm install' -- Node.js configuration not found (looking for: package.json).</echo>
      </else>
    </if>
  </target>

  <target name="test-js" depends="install-antcontrib, npm-install">
    <if>
      <not>
        <isset property="karma-is-available" />
      </not>
      <then>
        <fail>karma is not available on the PATH. Unit tests could not be run.</fail>
      </then>
    </if>
    <if>
      <available file="${js.karma.config}" />
      <then>
        <!-- we have karma available, use it to run the tests -->
        <exec executable="karma">
          <arg value="start"/>
          <arg value="${js.karma.config}"/>
          <!-- if we are running via ant, then assume we must 'single-run' -->
          <arg value="--single-run"/>
        </exec>
      </then>
      <else>
        <fail>There is no karma configuration file available (looking for: ${js.karma.config})</fail>
      </else>
    </if>
  </target>


</project>
